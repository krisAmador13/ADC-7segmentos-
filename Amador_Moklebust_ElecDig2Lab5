//Incluimos las librerías necesarias 
#include <Arduino.h>
#include "config.h"
#include "Adafruit_MQTT.h"
#include <stdint.h>
#include <driver/adc.h>
//llamamos las funciones e interrupciones
void display(uint8_t valorPot);
void IRAM_ATTR ada_ISR(void);
void mapeo();

//indicamos los pines de los potenciómetros y segmentos del display
//Definimos los pines de entradas y salidas 
#define Pot_1 34
#define Pot_2 35
#define pinA 13
#define pinB 12
#define pinC 27
#define pinD 26
#define pinE 25
#define pinF 33
#define pinG 32
#define boton 15
//Se establece la línea para poder iniciar la interrupción 
portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED;
volatile unsigned long debounce1 = 0;

//pines para encender el display indicado
#define display1 21
#define display2 22

uint8_t valorPot1, valorPot2, mapeo1, mapeo2;
int multiplic, envio;
// set up the 'counter' feed
AdafruitIO_Feed *p1 = io.feed("LAB5-POT1");
AdafruitIO_Feed *p2 = io.feed("LAB5-POT2");
AdafruitIO_Feed *multi = io.feed("LAB5-Multi");


void setup() {
//inicializamos la comunicación serial y el envio de datos a adafruit 
  Serial.begin(115200);
  while(! Serial);
  Serial.print("Connecting to Adafruit IO");
  io.connect();
  while(io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println();
  Serial.println(io.statusText());
//Se establecen las entradas y las salidas 
  pinMode(pinA, OUTPUT);
  pinMode(pinB, OUTPUT);
  pinMode(pinC, OUTPUT);
  pinMode(pinD, OUTPUT);
  pinMode(pinE, OUTPUT);
  pinMode(pinF, OUTPUT);
  pinMode(pinG, OUTPUT);
  pinMode(display1, OUTPUT);
  pinMode(display2, OUTPUT);
  pinMode(Pot_1, INPUT);
  pinMode(Pot_2, INPUT);
//Se inicia la interrupción del botón 
  attachInterrupt(digitalPinToInterrupt(boton), ada_ISR, RISING);
  pinMode(boton, INPUT_PULLDOWN);
}

void loop() {
  io.run();//Se inicia la comunicación con adafruit 

//Se hace el multiplexado de los displays para mostrar los valores 
  digitalWrite(display1, HIGH);
  digitalWrite(display2, LOW);
  display(mapeo1);
  delay(20);
  
  digitalWrite(display2, HIGH);
  digitalWrite(display1, LOW);
  display(mapeo2);
  delay(10);
//Se envían los datos de los potenciómetros a adafruit y se llama la función del mapeo
  if(envio == 1){
    mapeo();
    delay(100);
    p1->save(mapeo1);
    p2->save(mapeo2);
    multi->save(multiplic);
    delay(3000);
    envio = 0;
  }
  
}
//Funcion del mapeo, se encarga de recibir los valores de los potenciómetros e indicarlos en el monitor serial (solo como método de debuggeo).
//se asigna valor a la variable de la multiplicación
void mapeo(){
  valorPot1 = analogRead(Pot_1);
  valorPot2 = analogRead(Pot_2);

  mapeo1 = map(valorPot1, 0, 255, 0, 15);
  mapeo2 = map(valorPot2, 0, 255, 0, 15);
  multiplic = mapeo2*mapeo1;
  Serial.print("\n");
  Serial.print(mapeo1);
  Serial.print("\n");
  Serial.print(mapeo2);
}
//Función de interrupción de botón 
void IRAM_ATTR ada_ISR(void){
  unsigned long currentTime = millis();
  if ((currentTime - debounce1) > 50) {
    portENTER_CRITICAL_ISR(&mux);
    envio = 1;
    portEXIT_CRITICAL_ISR(&mux);
    debounce1 = currentTime;
  }
}
//Función para mostrar los valores del potenciómetro en los displays en formato deciomal y hexagecimal 
void display(uint8_t valorPot){
  switch (valorPot)
  {
  case 0:
    digitalWrite(pinA, HIGH);
    digitalWrite(pinB, HIGH);
    digitalWrite(pinC, HIGH);
    digitalWrite(pinD, HIGH);
    digitalWrite(pinE, HIGH);
    digitalWrite(pinF, HIGH);
    digitalWrite(pinG, LOW);
    break;
  case 1:
    digitalWrite(pinA, LOW);
    digitalWrite(pinB, HIGH);
    digitalWrite(pinC, HIGH);
    digitalWrite(pinD, LOW);
    digitalWrite(pinE, LOW);
    digitalWrite(pinF, LOW);
    digitalWrite(pinG, LOW);
    break;
  case 2:
    digitalWrite(pinA, HIGH);
    digitalWrite(pinB, HIGH);
    digitalWrite(pinC, LOW);
    digitalWrite(pinD, HIGH);
    digitalWrite(pinE, HIGH);
    digitalWrite(pinF, LOW);
    digitalWrite(pinG, HIGH);
    break;
  case 3:
    digitalWrite(pinA, HIGH);
    digitalWrite(pinB, HIGH);
    digitalWrite(pinC, HIGH);
    digitalWrite(pinD, HIGH);
    digitalWrite(pinE, LOW);
    digitalWrite(pinF, LOW);
    digitalWrite(pinG, HIGH);
    break;
  case 4:
    digitalWrite(pinA, LOW);
    digitalWrite(pinB, HIGH);
    digitalWrite(pinC, HIGH);
    digitalWrite(pinD, LOW);
    digitalWrite(pinE, LOW);
    digitalWrite(pinF, HIGH);
    digitalWrite(pinG, HIGH);
    break;
  case 5:
    digitalWrite(pinA, HIGH);
    digitalWrite(pinB, LOW);
    digitalWrite(pinC, HIGH);
    digitalWrite(pinD, HIGH);
    digitalWrite(pinE, LOW);
    digitalWrite(pinF, HIGH);
    digitalWrite(pinG, HIGH);
    break;
  case 6:
    digitalWrite(pinA, HIGH);
    digitalWrite(pinB, LOW);
    digitalWrite(pinC, HIGH);
    digitalWrite(pinD, HIGH);
    digitalWrite(pinE, HIGH);
    digitalWrite(pinF, HIGH);
    digitalWrite(pinG, HIGH);
    break;
  case 7:
    digitalWrite(pinA, HIGH);
    digitalWrite(pinB, HIGH);
    digitalWrite(pinC, HIGH);
    digitalWrite(pinD, LOW);
    digitalWrite(pinE, LOW);
    digitalWrite(pinF, LOW);
    digitalWrite(pinG, LOW);
    break;
  case 8:
    digitalWrite(pinA, HIGH);
    digitalWrite(pinB, HIGH);
    digitalWrite(pinC, HIGH);
    digitalWrite(pinD, HIGH);
    digitalWrite(pinE, HIGH);
    digitalWrite(pinF, HIGH);
    digitalWrite(pinG, HIGH);
    break;
  case 9:
    digitalWrite(pinA, HIGH);
    digitalWrite(pinB, HIGH);
    digitalWrite(pinC, HIGH);
    digitalWrite(pinD, HIGH);
    digitalWrite(pinE, LOW);
    digitalWrite(pinF, HIGH);
    digitalWrite(pinG, HIGH);
    break;
  case 10:
    digitalWrite(pinA, HIGH);
    digitalWrite(pinB, HIGH);
    digitalWrite(pinC, HIGH);
    digitalWrite(pinD, LOW);
    digitalWrite(pinE, HIGH);
    digitalWrite(pinF, HIGH);
    digitalWrite(pinG, HIGH);
    break;
  case 11:
    digitalWrite(pinA, LOW);
    digitalWrite(pinB, LOW);
    digitalWrite(pinC, HIGH);
    digitalWrite(pinD, HIGH);
    digitalWrite(pinE, HIGH);
    digitalWrite(pinF, HIGH);
    digitalWrite(pinG, HIGH);
    break;
  case 12:
    digitalWrite(pinA, HIGH);
    digitalWrite(pinB, LOW);
    digitalWrite(pinC, LOW);
    digitalWrite(pinD, HIGH);
    digitalWrite(pinE, HIGH);
    digitalWrite(pinF, HIGH);
    digitalWrite(pinG, LOW);
    break;
  case 13:
    digitalWrite(pinA, LOW);
    digitalWrite(pinB, HIGH);
    digitalWrite(pinC, HIGH);
    digitalWrite(pinD, HIGH);
    digitalWrite(pinE, HIGH);
    digitalWrite(pinF, LOW);
    digitalWrite(pinG, HIGH);
    break;
  case 14:
    digitalWrite(pinA, HIGH);
    digitalWrite(pinB, LOW);
    digitalWrite(pinC, LOW);
    digitalWrite(pinD, HIGH);
    digitalWrite(pinE, HIGH);
    digitalWrite(pinF, HIGH);
    digitalWrite(pinG, HIGH);
    break;
  case 15:
    digitalWrite(pinA, HIGH);
    digitalWrite(pinB, LOW);
    digitalWrite(pinC, LOW);
    digitalWrite(pinD, LOW);
    digitalWrite(pinE, HIGH);
    digitalWrite(pinF, HIGH);
    digitalWrite(pinG, HIGH);
    break;
  }
}
